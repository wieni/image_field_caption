<?php

/**
 * @file
 * Provides a caption textarea for image fields.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\image_field_caption\ImageCaptionStorage;

// @todo Support for Views, maybe built in in D8?
// @todo Support the revision management.

/**
 * Implements hook_field_info_alter().
 */
function image_field_caption_field_info_alter(&$info) {
  // Set a new class for the image fields.
  $info['image']['class'] = '\Drupal\image_field_caption\ImageCaptionItem';
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_config_edit_form'.
 */
function image_field_caption_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Get the entity.
  $entity = $form_state->getFormObject()->getEntity();
  // Check if the field is an image field.
  if ($entity->get('field_type') == 'image') {
    // Adds new submit callback function.
    $form['actions']['submit']['#submit'][] = '_image_field_caption_form_field_config_edit_submit';
  }
}

/**
 * Custom form submit callback for 'field_config_edit_form'.
 */
function _image_field_caption_form_field_config_edit_submit($form, FormStateInterface $form_state) {
  // Get the entity.
  $entity = $form_state->getFormObject()->getEntity();
  // Save the field settings related to the caption.
  $field_storage = Drupal::entityTypeManager()->getStorage('field_config')->load($entity->get('entity_type') . '.' . $entity->get('bundle') . '.' . $entity->get('field_name'));
  if (!empty($field_storage)) {
    // Get form values.
    $values = $form_state->getValues();
    // Set and save settings.
    $field_storage->setSetting('caption_field', $values['settings']['image_caption_field']);
    $field_storage->setSetting('caption_field_required', $values['settings']['image_caption_field_required']);
    $field_storage->save();
  }
  else {
    // Set message text.
    $message = t('Unable to load the field config of the %field_name field.', array(
      '%field_name' => $entity->get('entity_type') . '.' . $entity->get('bundle') . '.' . $entity->get('field_name'),
    ));
    // Add user message.
    drupal_set_message($message, 'error');
    // Add log entry.
    Drupal::logger('image_field_caption')->error($message);
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function image_field_caption_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\field\Entity\FieldConfig $field */
  $field = $context['items']->getFieldDefinition();
    
  // If the current field is an image field.
  if ($field->getType() == 'image') {
    // Get the current field settings.
    $settings = $field->getSettings();
    // Check if the current field has the caption.
    if (!empty($settings['caption_field'])) {
      $element['#process'][] = '_image_field_caption_widget_process';
    }
  }
}

/**
 * Custom callback function for the #process of an image field type.
 */
function _image_field_caption_widget_process($element, FormStateInterface &$form_state, $form) {
    $imageCaption = Drupal::service('image_field_caption.storage');
    
    /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
    $entity = $form_state->getFormObject()->getEntity();
    
    // No image no caption.
    if (!$entity->getFieldDefinition($element['#field_name'])) {
        return $element;
    }
    
    // Get the field settings.
    $captionSettings = $entity
        ->getFieldDefinition($element['#field_name'])
        ->getSettings();
    
    $currentValue = $form_state->getValue($element['#field_name']);
    
    if (isset($currentValue[$element['#delta']]['image_field_caption'])) {
        // Get the curval out of form state
        $caption = [
            'caption' => $currentValue[$element['#delta']]['image_field_caption']['value'],
            'format' => $currentValue[$element['#delta']]['image_field_caption']['format']
        ];
    } else {
        // Get the caption out of DB.
        $caption = $imageCaption->getCaption(
            $entity->getEntityTypeId(),
            $entity->bundle(),
            $element['#field_name'],
            $entity->id(),
            empty($entity->getRevisionId()) ? $entity->id() : $entity->getRevisionId(),
            $entity->language()->getId(),
            $element['#delta']
        );
    }
    
    $element['image_field_caption'] = array(
      '#title' => t('Caption'),
      '#type' => 'text_format',
      '#default_value' => (!empty($element['#value']['caption'])) ? $element['#value']['caption'] : '',
      '#access' => (bool) $element['#value']['fids'],
      '#format' => (!empty($caption['format']) ? $caption['format']: NULL),
      '#value' => (!empty($caption['caption']) ? $caption['caption']: NULL),
      '#required' => (!empty($captionSettings['caption_field_required'])) ? TRUE : FALSE,
    );

  return $element;
}

/**
 * Implements hook_theme().
 */
function image_field_caption_theme() {
  return array(
    'image_caption_formatter' => array(
      // As we extend the default image format, the variables passed to the callback function
      // are the same than the original "callback" function ("image_formatter").
      'variables' => array('item' => NULL, 'item_attributes' => NULL, 'url' => NULL, 'image_style' => NULL, 'caption' => NULL),
    ),
  );
}

/**
 * Implements hook_entity_insert().
 */
function image_field_caption_entity_insert(EntityInterface $entity) {
  image_field_caption_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 */
function image_field_caption_entity_update(EntityInterface $entity) {
    $imageCaption = Drupal::service('image_field_caption.storage');
    
  // For a fieldable entity.
  if (($entity instanceof FieldableEntityInterface)) {
    // Get the field names of all image fields.
    $field_names = _image_field_caption_get_image_field_names($entity);
    foreach ($field_names as $field_name) {
      // Get the current field settings.
      $settings = $entity->get($field_name)->getSettings();
      // If the caption is not enabled => pass this field.
      if (empty($settings['caption_field'])) {
        continue;
      }
      // Delete the caption associated to this field.
        $imageCaption->deleteCaption($entity->getEntityTypeId(), $entity->bundle(), $field_name, $entity->id(), $entity->language()->getId());
      // Delete the caption revision associated to this field.
      /*
      $imageCaption->deleteCaptionRevision($entity->getEntityTypeId(), $entity->bundle(), $field_name, $entity->id(), $entity->getRevisionId(), $entity->language()->getId());
      */
      // Get the current field values.
      $values = $entity->get($field_name)->getValue();
      foreach ($values as $delta => $value) {
        // If a caption text is defined.
        if (!empty($value['image_field_caption']['value'])) {
          // Insert the caption associated to this field.
          // @todo Do the insertion using a multiple query instead several queries into a foreach;
          $revision_id = (empty($entity->getRevisionId()) ? $entity->id() : $entity->getRevisionId());
            $imageCaption->insertCaption(
            $entity->getEntityTypeId(),
            $entity->bundle(),
            $field_name,
            $entity->id(),
            $revision_id,
            $entity->language()->getId(),
            $delta,
            $value['image_field_caption']['value'],
            $value['image_field_caption']['format']
          );
          // Insert the caption revision associated to this field.
          /*
          if ($entity->isNewRevision()) {
            $imageCaption->insertCaptionRevision(
              $entity->getEntityTypeId(),
              $entity->bundle(),
              $field_name,
              $entity->id(),
              $revision_id,
              $entity->language()->getId(),
              $delta,
              $value['image_field_caption']['value'],
              $value['image_field_caption']['format']
            );
          }
          */
        }
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function image_field_caption_entity_delete(EntityInterface $entity) {
    $imageCaption = Drupal::service('image_field_caption.storage');
    
  // For a fieldable entity.
  if (($entity instanceof FieldableEntityInterface)) {
    // Get the field names of all image fields.
    $field_names = _image_field_caption_get_image_field_names($entity);
    foreach ($field_names as $field_name) {
      // Delete the caption associated to this field.
      $imageCaption->deleteCaption($entity->getEntityTypeId(), $entity->bundle(), $field_name, $entity->id(), $entity->language()->getId());
      // Delete the caption revisions associated to this field.
      /*
      $imageCaption->deleteCaptionRevisions($entity->getEntityTypeId(), $entity->bundle(), $field_name, $entity->id(), $entity->language()->getId());
      */
    }
  }
}

/**
 * Implements hook_entity_revision_delete().
 */
function image_field_caption_entity_revision_delete(EntityInterface $entity) {
    // $imageCaption = Drupal::service('image_field_caption.storage');
    
    /*
  // For a fieldable entity.
  if (($entity instanceof FieldableEntityInterface)) {
    // Get the field names of all image fields.
    $field_names = _image_field_caption_get_image_field_names($entity);
    if (!empty($field_names)) {
      // Delete the caption revisions associated to this specific revision.
      $imageCaption->deleteCaptionRevisionsByRevisionId($entity->getRevisionId());
    }
  }
  */
}

/**
 * Determines the image fields on an entity.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   An entity whose fields to analyze.
 *
 * @return array
 *   The names of the fields on this entity that support formatted text.
 */
function _image_field_caption_get_image_field_names(FieldableEntityInterface $entity) {
  // Check if fields definitions are available.
  $field_definitions = $entity->getFieldDefinitions();
  if (empty($field_definitions)) {
    return array();
  }
  // Only return image fields.
  return array_keys(array_filter($field_definitions, function (FieldDefinitionInterface $definition) {
    return in_array($definition->getType(), array('image'), TRUE);
  }));
}
